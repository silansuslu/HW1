/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package HW1;

import java.util.HashMap;
import java.util.Map;
import java.util.ArrayList;

//import org.apache.logging.log4j.LogManager;
//import org.apache.logging.log4j.Logger;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

public class App {
    public String getGreeting() {
        return "Hello! ";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        // Logger logger = LogManager.getLogger(App.class);
        // logger.error("Hello");

        get("/", (req, res) -> "Yuppii!!");

        post("/compute", (req, res) -> {

            String input1 = req.queryParams("input1");
            java.util.Scanner sc1 = new java.util.Scanner(input1);
            sc1.useDelimiter("[;\r\n]+");
            java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
            while (sc1.hasNext()) {
                int value = Integer.parseInt(sc1.next().replaceAll("\\s", ""));
                inputList.add(value);
            }
            sc1.close();
            System.out.println(inputList);

            String input2 = req.queryParams("input2").replaceAll("\\s", "");
            int input2AsInt = Integer.parseInt(input2);

            boolean result = App.search(inputList, input2AsInt);

            Map<String, Boolean> map = new HashMap<String, Boolean>();
            map.put("result", result);
            return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());

        get("/compute", (rq, rs) -> {
            Map<String, String> map = new HashMap<String, String>();
            map.put("result", "not computed yet!");
            return new ModelAndView(map, "compute.mustache");
        }, new MustacheTemplateEngine());
    }

    public static String createMailAddress(String[] names, int index, Integer option, String extension) { // 0-removeVowel,
                                                                                                          // 1-duplicateVowel
        if (names.length == 0)
            return null;
        if (index > names.length - 1)
            return null;
        if (!(extension.equals("gmail") || extension.equals("hotmail") || extension.equals("yahoo")))
            return null;
        if (option < 0 || option > 1)
            return null;

        String name = names[index];
        String newName = "";
        int size = names[index].length();

        if (option.equals(0)) {
            for (int i = 0; i < size; i++) {
                if (name.charAt(i) == 'a' || name.charAt(i) == 'e' || name.charAt(i) == 'i' || name.charAt(i) == 'o'
                        || name.charAt(i) == 'u') {
                    continue;
                } else
                    newName += name.charAt(i);
            }

        } else if (option.equals(1)) {
            for (int i = 0; i < size; i++) {
                if (name.charAt(i) == 'a' || name.charAt(i) == 'e' || name.charAt(i) == 'i' || name.charAt(i) == 'o'
                        || name.charAt(i) == 'u') {
                    newName += name.charAt(i) + "" + name.charAt(i);
                } else
                    newName += name.charAt(i);
            }
        }

        newName = newName + (index + 1) + "@" + extension + ".com";
        return newName;

    }

    public static boolean search(ArrayList<Integer> array, int e) {
        System.out.println("inside search");
        if (array == null)
            return false;

        for (int elt : array) {
            if (elt == e)
                return true;
        }
        return false;
    }

}
